GAMMA = .95
LEARNING_RATE = .01

MEMORY_SIZE = 1000000
BATCH_SIZE = 20

EXPLORATION_MAX = 1.0
EXPLORATION_MIN = 0.01
EXPLORATION_DECAY = 0.995

class DQNSolver:
    def __init__(self, obs_space, act_space):
        self.exploration_rate = EXPLORATION_MAX
        
        self.act_space = act_space
        self.memory = deque(maxlen=MEMORY_SIZE)
        
        self.model = Sequential()
        self.model.add(Dense(24, input_shape=(obs_space,), activation='relu'))
        self.model.add(Dense(24, activation='relu'))
        self.model.add(Dense(self.act_space, activation="linear"))
        self.model.compile(loss="mse", optimizer=Adam(lr=LEARNING_RATE))
        
    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))
    
    def act(self, state):
        if np.random.rand() < self.exploration_rate:
            return random.randrange(self.act_space)
        q_values = self.model.predict(state)
        return np.argmax(q_values[0])
    
    def experience_replay(self):
        if len(self.memory) < BATCH_SIZE:
            return
        batch = random.sample(self.memory, BATCH_SIZE)
        for state, action, reward, state_next, done in batch:
            q_update = reward
            if not done:
                q_update = (reward + GAMMA * np.amax(self.model.predict(state_next)[0]))
            q_values = self.model.predict(state)
            q_values[0][action] = q_update
            self.model.fit(state, q_values, verbose=0)
        self.exploration_rate *= EXPLORATION_DECAY
        self.exploration_rate = max(EXPLORATION_MIN, self.exploration_rate)
        
env = gym.make("CartPole-v0")

obs_space = env.observation_space.shape[0]
act_space = env.action_space.n
dqn_solver = DQNSolver(obs_space, act_space)
run = 0




while True:
    run += 1
    state = env.reset()
    env.seed(random.randint(1, 1000))
    state = np.reshape(state, [1, obs_space])
    step = 0
    while True:
        step +=1
        #env.render()
        action = dqn_solver.act(state)
        state_next, reward, done, info = env.step(action)
        reward = reward if not done else -reward
        state_next = np.reshape(state_next, [1, obs_space])
        dqn_solver.remember(state, action, reward, state_next, done)
        dqn_solver.experience_replay()
        state = state_next
        if done:
            print(f"Run {run}, exploration: {dqn_solver.exploration_rate}, score: {step}")
            break
        dqn_solver.experience_replay()
